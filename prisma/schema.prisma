
// Prisma schema for a Q&A app using MongoDB
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Models

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  username  String   @unique
  email     String   @unique
  password  String 
  avatar    String?
  createdAt DateTime @default(now())
  questions Question[]
  answers   Answer[]
  friendshipsSent     Friendship[] @relation("FriendshipSender")
  friendshipsReceived Friendship[] @relation("FriendshipReceiver")
  QuestionRecipient QuestionRecipient[]
  Blocker BlockedUser[] @relation("Blocker")
  BlockedUser BlockedUser[] @relation("BlockedUser")
}

model Question {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  createdBy    User              @relation(fields: [createdById], references: [id])
  createdById  String            @db.ObjectId
  questionText String
  visibility   Visibility
  identity     Identity
  isTimed      Boolean           
  endTimeStamp DateTime?         // nullable if not timed
  isPublic     Boolean          
  publicLink   String?
  createdAt    DateTime          @default(now())
  recipients   QuestionRecipient[]
  answers      Answer[]
}

model QuestionRecipient {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  hasAnswered Boolean @default(false)
}

model Answer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  answer     String
  answeredAt DateTime @default(now())
}

model Friendship {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  sender     User     @relation("FriendshipSender", fields: [senderId], references: [id])
  senderId   String   @db.ObjectId
  receiver   User     @relation("FriendshipReceiver", fields: [receiverId], references: [id])
  receiverId String   @db.ObjectId
  status     FriendshipStatus
  createdAt  DateTime @default(now())
}

model BlockedUser {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  blocker    User     @relation("Blocker", fields: [blockerId], references: [id])
  blockerId  String   @db.ObjectId
  blockedUser User     @relation("BlockedUser", fields: [blockedUserId], references: [id])
  blockedUserId String @db.ObjectId
  createdAt  DateTime @default(now())
}

// Enums

enum Identity {
  showName
  anonymous
}

enum Visibility {
  allHands
  instantReveal
}

enum FriendshipStatus {
  pending
  accepted
  rejected
}
